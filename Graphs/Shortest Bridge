class Solution {
    public int shortestBridge(int[][] grid) {
        boolean found = false;
        Queue<int[]> q = new LinkedList<>();
        for(int i=0;i<grid.length;i++){
            if(found == true){
                break;
            }
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1){
                    dfs(grid,i,j,q);
                    found = true;
                    break;
                }
            }
        }
            int steps=0;
            int dir[][]={{-1,0},{1,0},{0,-1},{0,1}};
            while(!q.isEmpty()){
                int size= q.size();
                for(int k=0;k<size;k++){
                    int cell[]= q.poll();
                    for(int d[]: dir){
                        int x=cell[0]+d[0];
                        int y = cell[1]+d[1];
                        if(x>=0 && x<grid.length && y>=0 && y<grid[0].length){
                            if(grid[x][y]==1){
                                return steps;
                            }else if(grid[x][y]==0){
                                grid[x][y]=-1;
                                q.add(new int[]{x,y});
                            }
                        }
                    }
                    
                }
                steps++;
            }
        return -1;
    }
    public static void dfs(int grid[][],int i,int j,Queue<int[]>q){
        if(i<0||i>=grid.length||j<0||j>=grid[0].length||grid[i][j]!=1){
            return;
        }
        grid[i][j]=-1;
        q.offer(new int[]{i,j});
        dfs(grid,i+1,j,q);
        dfs(grid,i-1,j,q);
        dfs(grid,i,j+1,q);
        dfs(grid,i,j-1,q);
    }
}
