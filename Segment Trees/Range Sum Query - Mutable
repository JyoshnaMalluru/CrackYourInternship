class NumArray {
    int tree[];
    int nums[];
    public NumArray(int[] nums) {
        this.nums = nums;
        this.tree = new int[4*nums.length];
        builtTree(0,0,nums.length-1);
    }
    public void builtTree(int i,int si,int sj){
        if(si == sj){
            tree[i]= nums[si];
        }else{
            int mid = si+(sj-si)/2;
            builtTree(2*i+1,si,mid);
            builtTree(2*i+2,mid+1,sj);
            tree[i]=tree[2*i+1]+tree[2*i+2];
        }

    }
    public void update(int index, int val) {
        int diff = val-nums[index];
        nums[index] = val;
        updateUtil(0,0,nums.length-1,index,val,diff);
    }
    public void updateUtil(int i,int si,int sj,int index,int val,int diff){
        if(index>sj||index<si){
           return;
        }
        tree[i]+=diff;
        if(si != sj){
            int mid = si+(sj-si)/2;
            updateUtil(2*i+1,si,mid,index,val,diff);
            updateUtil(2*i+2,mid+1,sj,index,val,diff);
        }
    }
    
    public int sumRange(int left, int right) {
        return sumRangeUtil(0,0,nums.length-1,left,right);
    }
    public int sumRangeUtil(int i,int si,int sj,int qi,int qj){
        if(si>qj || sj<qi){
            return 0;
        }else if(si>=qi && sj<=qj){
            return tree[i];
        }else{
            int mid = si+(sj-si)/2;
            int left = sumRangeUtil(2*i+1,si,mid,qi,qj);
            int right = sumRangeUtil(2*i+2,mid+1,sj,qi,qj);
            return left+right;
        }
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(index,val);
 * int param_2 = obj.sumRange(left,right);
 */
