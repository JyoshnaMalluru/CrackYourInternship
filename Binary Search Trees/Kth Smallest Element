/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if(root == null){
            return 0;
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        addToList(root,pq);
        int i=0;
        int val = 0;
        while(i<k){
           val= pq.remove();
            i++;
        }
        return val;
    }
    public static void addToList(TreeNode root,PriorityQueue<Integer> pq){
        if(root == null){
            return;
        }
        pq.add(root.val);
        addToList(root.left,pq);
        addToList(root.right,pq);
    }
}


class Solution {
    public int count = 0;
    public int res=0;
    public int kthSmallest(TreeNode root, int k) {
        inorder(root,k);
        return res;
    }
    public void inorder(TreeNode root, int k){
        if(root == null){
            return;
        }
        inorder(root.left,k);
        count++;
        if(count == k){
            res=root.val;
            return;
        }
        inorder(root.right,k);
    }
}
