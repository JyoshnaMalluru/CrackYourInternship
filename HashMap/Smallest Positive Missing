class Solution {
    // Function to find the smallest positive number missing from the array.
    public int missingNumber(int[] arr) {
       
        HashSet<Integer> set = new HashSet<>();
        for(int i=0;i<arr.length;i++){
            set.add(arr[i]);
        }
        int i=1;
        while(set.contains(i)){
            i++;
        }
        return i;
    }
}



import java.util.*;

class Solution {
    public int missingNumber(int[] arr) {
        int n = arr.length;

        // Step 1: Place numbers at their correct positions using Cyclic Sort
        for (int i = 0; i < n; i++) {
            while (arr[i] > 0 && arr[i] <= n && arr[i] != arr[arr[i] - 1]) {
                // Swap arr[i] with arr[arr[i] - 1]
                int temp = arr[i];
                arr[i] = arr[temp - 1];
                arr[temp - 1] = temp;
            }
        }

        // Step 2: Find the first missing number
        for (int i = 0; i < n; i++) {
            if (arr[i] != i + 1) {
                return i + 1;
            }
        }

        // Step 3: If all elements are in place, return n + 1
        return n + 1;
    }
}
