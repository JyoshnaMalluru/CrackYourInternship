class twoStacks {
    public Stack<Integer> stk1;
    public Stack<Integer> stk2;
    twoStacks() {
          stk1 = new Stack<>();
          stk2 = new Stack<>();
    }

    // Function to push an integer into the stack1.
    void push1(int x) {
        stk1.push(x);
    }

    // Function to push an integer into the stack2.
    void push2(int x) {
        stk2.push(x);
    }

    // Function to remove an element from top of the stack1.
    int pop1() {
        if(!stk1.isEmpty()){
           int top = stk1.pop();
           return top;
        }else{
            return -1;
        }
    }

    // Function to remove an element from top of the stack2.
    int pop2() {
        if(!stk2.isEmpty()){
           int top = stk2.pop();
           return top;
        }else{
            return -1;
        }
    }
}


class twoStacks {
        private int arr[];
        public int size = 100;
        private int top1;
        private int top2;
    public twoStacks() {
        this.size = size;
        arr = new int[size];
        top1 = -1;
        top2 = size;
    }
    
    // Function to push an integer into the stack1.
    void push1(int x) {
        // code here
        if(top1+1<top2){
            top1++;
            arr[top1]=x;
        }
    }

    // Function to push an integer into the stack2.
    void push2(int x) {
        // code here
        if(top1+1<top2){
            top2--;
            arr[top2]=x;
        }
    }

    // Function to remove an element from top of the stack1.
    int pop1() {
        // code here
        int val = 0;
        if(top1>=0){
            val =  arr[top1];
            top1--;
        }else{
            val =  -1;
        }
        return val;
    }

    // Function to remove an element from top of the stack2.
    int pop2() {
        // code here
        int val = 0;
        if(top2<size){
            val= arr[top2];
            top2++;
        }else{
            val= -1;
        }
        return val;
    }
}
