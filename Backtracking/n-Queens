class Solution {
    public boolean isSafe(char[][] board,int row,int col){
        for(int i=0;i<board.length;i++){
            if(board[i][col]=='Q'){
                return false;
            }
        }
        for(int i=0;i<board.length;i++){
            if(board[row][i]=='Q'){
                return false;
            }
        }
        for(int r=row,c=col;r>=0 && c>=0 ;r--,c--){
            if(board[r][c]=='Q'){
                return false;
            }
        }
        for(int r=row,c=col;r>=0 && c<board.length ;r--,c++){
            if(board[r][c]=='Q'){
                return false;
            }
        }
        
       for(int c=col,r = row; c>=0 && r<board.length; r++, c--) {
           if(board[r][c] == 'Q') {
               return false;
           }
       }
      
       for(int c=col,r=row; c<board.length && r<board.length; c++, r++) {
           if(board[r][c] == 'Q') {
               return false;
           }
       }
        return true;
    }
    public void saveboard(char[][] board,List<List<String>> res){
        List<String> list = new ArrayList<>();
        for(int i=0;i<board.length;i++){
             String row="";
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]=='Q'){
                    row+="Q";
                }else{
                    row+=".";
                }
            }
            list.add(row);
        }
        res.add(list);
    }
    public void helper(char[][] board,List<List<String>> res,int col){
        if(col==board.length){
            saveboard(board,res);
            return;
        }
        for(int row=0;row<board.length;row++){
            if(isSafe(board,row,col)){
                board[row][col]='Q';
                helper(board,res,col+1);
                board[row][col]='.';
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();
        char[][] board = new char[n][n];
        helper(board,res,0);
        return res;
    }
}
