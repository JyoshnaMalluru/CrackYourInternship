class Tree {
    public ArrayList<Integer> reverseLevelOrder(Node root) {
        // code here
        ArrayList<Integer>list = new ArrayList<>();
        Queue<Node> q = new LinkedList<>();
        if(root== null){
            return list;
        }
        q.add(root);
        q.add(null);
        while(!q.isEmpty()){
            Node curr = q.remove();
            if(curr == null){
                if(q.isEmpty()){
                    break;
                }else{
                    q.add(null);
                }
            }else{
                list.add(curr.data);
                if(curr.right != null){
                    q.add(curr.right);
                }
                if(curr.left != null){
                    q.add(curr.left);
                }
            }
        }
        Collections.reverse(list);
        return list;
        // Queue <Node> q = new LinkedList<>();
        // ArrayList <Integer> ans = new ArrayList<>();
        // // code here
        // if(root == null){
        //     return ans;
        // }
        // q.add(root);
        // while(!q.isEmpty()){
        //     Node curr = q.remove();
        //     ans.add(curr.data);
        //     if(curr.right != null){
        //         q.add(curr.right);
        //     }
        //     if(curr.left!=null){
        //         q.add(curr.left);
        //     }
        // }
        // Collections.reverse(ans);
        // return ans;
    }
}
