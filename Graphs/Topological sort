class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        boolean[] vis = new boolean[V];
        Stack<Integer> stk = new Stack<>();
        int arr[] = new int[V];
        for(int i=0;i<V;i++){
            if(!vis[i]){
                topSortUtil(adj,i,vis,stk);
            }
        }
        int i=0;
        while(!stk.isEmpty()){
            arr[i] = stk.pop();
            i++;
        }
        return arr;
    }
    
    public static void topSortUtil(ArrayList<ArrayList<Integer>> adj,int curr,boolean vis[],Stack<Integer> stk){
        vis[curr] = true;
        for(int i=0;i<adj.get(curr).size();i++){
            Integer e = adj.get(curr).get(i);
            if(!vis[e]){
                topSortUtil(adj,e,vis,stk);
            }
        }
        stk.push(curr);
    }
}



class Solution {
    // Function to return list containing vertices in Topological order.
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        // Your code here
        int v = adj.size();
        ArrayList<Integer> res = new ArrayList<>();
        int indegree[]= new int[v];
        calcIndegree(indegree,adj);
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<v;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        while(!q.isEmpty()){
            int curr = q.remove();
            res.add(curr);
            for(int i=0;i<adj.get(curr).size();i++){
                int val= adj.get(curr).get(i);
                indegree[val]--;
                if(indegree[val]==0){
                    q.add(val);
                }
            }
        }
        return res;
    }
    static void calcIndegree(int indegree[],ArrayList<ArrayList<Integer>> adj){
        for(int i=0;i<adj.size();i++){
            for(int j=0;j<adj.get(i).size();j++){
                int e = adj.get(i).get(j);
                indegree[e]++;
            }
        }
    }
}
